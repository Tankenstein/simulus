{"version":3,"sources":["serviceWorker.ts","ambusim.ts","index.ts"],"names":["isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","state","controller","console","log","onUpdate","onSuccess","catch","error","moduleId","Location","id","name","description","dataType","PropertyDataType","GEOMETRY","Health","NUMBER","Condition","STRING","BedCount","Hospital","concat","ownProperties","Patient","Ambulance","AccidentModel","parameterSchema","type","required","properties","latitude","title","longitude","radius","magnitude","minimum","maximum","criticality","run","params","cb","getBiasRandom","min","max","bias","influence","arguments","length","undefined","rnd","Math","random","mix","randomWithinRadius","value","index","entity","createEntity","typeId","health","entities","Object","objectSpread","archived","x","y","condition","AmbulanceAndPatientBehaviourModel","time","runInWorker","PatientId","AmbulanceId","EARTH_RADIUS","deg2rad","deg","PI","distance","firstPoint","secondPoint","dLat","dLon","a","sin","cos","c","atan2","sqrt","isNear","number","_loop","alivePatients","filter","criticalPatients","patient","ambulances","forEach","criticalPatient","movementTargets","ambulance","data","currentTarget","nearestCriticalPatients","sort","b","aLocation","bLocation","patientLocation","currentDistance","JSON","parse","stringify","keys","entityId","find","target","moveSpeed","AMBULANCE_SPEED","AlivePatientsIndicator","IndicatorType","VALUE","calculate","DeadPatientsIndicator","CriticalPatientsIndicator","StablePatientsIndicator","WorldMap","MAP","markers","isCritical","color","push","content","icon","mapBoxToken","zoom","PatientsByCondition","BAR","patientsByHealth","pred","h","Ambusim","entityTypes","models","indicators","simulus","document","getElementById","routerType","Options","RouterType","HASH","modules","URL","process","href","origin","addEventListener","fetch","response","contentType","headers","get","status","indexOf","ready","unregister","reload","checkValidServiceWorker"],"mappings":"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","file":"static/js/main.adab9681.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(/^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/),\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      (process as { env: { [key: string]: string } }).env.PUBLIC_URL,\n      window.location.href,\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA',\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.',\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log('No internet connection found. App is running in offline mode.');\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import {\n  Module,\n  EntityType,\n  PropertyType,\n  PropertyDataType,\n  BehaviourModel,\n  createEntity,\n  Geometry,\n  ValueIndicator,\n  IndicatorType,\n  MapIndicator,\n  MapIndicatorMarker,\n  BarIndicator,\n} from 'simulus';\n\n/*\n\nexample scenario:\n\naccident: 59.413298, 24.806158\nhospitals:\n59.427546, 24.756372\n\npatients: 50\ncriticality: 3\nradius: 0.005\n\n*/\n\nconst moduleId = 'com.ukutammet.ambusim.v1';\n\n// Properties /////////////////////////////////////////////////\n\nconst Location: PropertyType = {\n  id: 'location',\n  name: 'location',\n  description: 'lat/lng of a hospital',\n  dataType: PropertyDataType.GEOMETRY,\n};\n\nconst Health: PropertyType = {\n  id: 'health',\n  name: 'health',\n  description: 'How ok this patient is on a scale of 1-5',\n  dataType: PropertyDataType.NUMBER,\n};\n\nconst Condition: PropertyType = {\n  id: 'condition',\n  name: 'condition',\n  description: 'Is this patient stable or critical',\n  dataType: PropertyDataType.STRING,\n};\n\nconst BedCount: PropertyType = {\n  id: 'bedCount',\n  name: 'bed count',\n  description: 'how many beds a hospital has',\n  dataType: PropertyDataType.NUMBER,\n};\n\n// Entity types ///////////////////////////////////////////////\n\nconst Hospital: EntityType = {\n  id: `${moduleId}.hospital`,\n  name: 'Hospital',\n  description: 'What ambulances use as a station',\n  ownProperties: [Location, BedCount],\n};\n\nconst Patient: EntityType = {\n  id: `${moduleId}.patient`,\n  name: 'Patient',\n  description: 'A patient that might need help',\n  ownProperties: [Location, Health, Condition],\n};\n\nconst Ambulance: EntityType = {\n  id: `${moduleId}.ambulance`,\n  name: 'Ambulance',\n  description: 'An ambulance that drives around',\n  ownProperties: [Location],\n};\n\n// Models ///////////////////////////////////////////////\nconst AccidentModel: BehaviourModel = {\n  id: `${moduleId}.model.accident`,\n  name: 'Start an accident at some place to create patients',\n  parameterSchema: {\n    type: 'object',\n    required: ['latitude', 'longitude', 'magnitude', 'criticality'],\n    properties: {\n      latitude: {\n        type: 'number',\n        title: 'Latitude of accident',\n      },\n      longitude: {\n        type: 'number',\n        title: 'Longitude of accident',\n      },\n      radius: {\n        type: 'number',\n        title: 'Radius size of accident',\n      },\n      magnitude: {\n        type: 'integer',\n        title: 'Magnitude (how many people are effected, 1-2000)',\n        minimum: 1,\n        maximum: 2000,\n      },\n      criticality: {\n        type: 'integer',\n        title: 'Criticality (how bad was the average person affected, 1-5)',\n        minimum: 1,\n        maximum: 5,\n      },\n    },\n  },\n  run: (state, params, cb) => {\n    function getBiasRandom(min: number, max: number, bias: number, influence: number = 1): number {\n      const rnd = Math.random() * (max - min) + min;\n      const mix = Math.random() * influence; // random mixer\n      return rnd * (1 - mix) + bias * mix; // mix full range and bias\n    }\n\n    function randomWithinRadius(value: number, radius: number) {\n      return radius * Math.random() * (Math.random() < 0.5 ? -1 : 1) + value;\n    }\n\n    for (let index = 0; index < params.magnitude; index++) {\n      const entity = createEntity({\n        typeId: Patient.id,\n        name: `Patient ${index}`,\n      });\n      const health = {\n        type: Health,\n        value: getBiasRandom(-1, 5, 5 - params.criticality),\n      };\n      state.entities = state.entities.concat([\n        {\n          ...entity,\n          type: Patient,\n          archived: false,\n          properties: {\n            location: {\n              type: Location,\n              value: {\n                x: randomWithinRadius(params.latitude, params.radius),\n                y: randomWithinRadius(params.longitude, params.radius),\n              },\n            },\n            health,\n            condition: {\n              type: Condition,\n              value:\n                health.value < 2 || (health.value < 3 && Math.random() < 0.5)\n                  ? 'critical'\n                  : 'stable',\n            },\n          },\n        },\n      ]);\n    }\n\n    cb(state);\n  },\n};\n\nconst AmbulanceAndPatientBehaviourModel: BehaviourModel = {\n  id: `${moduleId}.model.ambulanceAndPatientBehaviour`,\n  name: 'Ambulance/patient behaviour',\n  parameterSchema: {\n    type: 'object',\n    required: ['time'],\n    properties: {\n      time: {\n        type: 'number',\n        title: 'Time to simulate, in minutes (0-1440)',\n        minimum: 0,\n        maximum: 1440,\n      },\n    },\n  },\n  // cannot access variable outside the scope, as it will be run in a worker\n  runInWorker(state, params, cb) {\n    // Helpers ///////////////////////////////////////////////////\n    const moduleId = 'com.ukutammet.ambusim.v1';\n    const PatientId = `${moduleId}.patient`;\n    const AmbulanceId = `${moduleId}.ambulance`;\n\n    const EARTH_RADIUS = 6378100;\n    const AMBULANCE_SPEED = 40;\n\n    function deg2rad(deg: number): number {\n      return deg * (Math.PI / 180);\n    }\n\n    // Haversine formula, implementation from https://stackoverflow.com/questions/27928/calculate-distance-between-two-latitude-longitude-points-haversine-formula\n    function distance(firstPoint: Geometry, secondPoint: Geometry): number {\n      // returns distance in meters\n      const dLat = deg2rad(secondPoint.x - firstPoint.x); // deg2rad below\n      const dLon = deg2rad(secondPoint.y - firstPoint.y);\n      const a =\n        Math.sin(dLat / 2) * Math.sin(dLat / 2) +\n        Math.cos(deg2rad(firstPoint.x)) *\n          Math.cos(deg2rad(secondPoint.x)) *\n          Math.sin(dLon / 2) *\n          Math.sin(dLon / 2);\n      const c = 2 * Math.atan2(Math.sqrt(a), Math.sqrt(1 - a));\n      const d = EARTH_RADIUS * c;\n      return d;\n    }\n\n    function copy<T>(data: T): T {\n      return JSON.parse(JSON.stringify(data));\n    }\n\n    const isNear = (number: number): boolean => number < 20; // below 20m\n\n    while (params.time--) {\n      // a tick every minute\n      const alivePatients = state.entities.filter(\n        entity => entity.type.id === PatientId && entity.properties.health.value > 0,\n      );\n      const criticalPatients = alivePatients.filter(\n        patient => patient.properties.condition.value === 'critical',\n      );\n      const ambulances = state.entities.filter(entity => entity.type.id === AmbulanceId);\n      // const hospitals = state.entities.filter(entity => entity.id === HospitalId);\n      // first, simulate critical patients getting worse.\n      criticalPatients.forEach(criticalPatient => {\n        criticalPatient.properties.health.value =\n          (criticalPatient.properties.health.value as number) - 0.05; // takes 20 minutes to go down 1 point of health\n      });\n\n      // state\n      const movementTargets: { [key: string]: Geometry } = {};\n\n      // pick targets for ambulances\n      ambulances.forEach(ambulance => {\n        const currentTarget = movementTargets[ambulance.id];\n        const location = ambulance.properties.location.value as Geometry;\n        if (!currentTarget && location) {\n          const nearestCriticalPatients = alivePatients\n            .filter(patient => {\n              const condition = patient.properties.condition.value as string;\n              const location = patient.properties.location.value as Geometry;\n              return condition && location ? condition === 'critical' : false;\n            })\n            .sort((a, b) => {\n              const aLocation = a.properties.location.value as Geometry;\n              const bLocation = b.properties.location.value as Geometry;\n              return distance(location, aLocation) - distance(location, bLocation);\n            });\n          if (nearestCriticalPatients.length) {\n            const patient = nearestCriticalPatients[0];\n            const patientLocation = patient.properties.location.value as Geometry;\n            const currentDistance = distance(location, patientLocation);\n            if (isNear(currentDistance)) {\n              // Stabilise patient\n              patient.properties.condition.value = 'stable';\n            } else {\n              // Move to patient\n              movementTargets[ambulance.id] = copy(patientLocation);\n            }\n          }\n        }\n      });\n\n      // run movement\n      Object.keys(movementTargets).forEach(entityId => {\n        const entity = state.entities.find(entity => entity.id === entityId)!;\n        const speed = AMBULANCE_SPEED * 16.66;\n        const location = entity.properties.location.value as Geometry;\n        const target = movementTargets[entityId]!;\n        if (entity && speed && location && target) {\n          const currentDistance = distance(location, target);\n          if (!isNear(currentDistance)) {\n            const moveSpeed = Math.min(speed, currentDistance);\n            location.x += ((target.x - location.x) / currentDistance) * moveSpeed;\n            location.y += ((target.y - location.y) / currentDistance) * moveSpeed;\n          } else {\n            delete movementTargets[entityId];\n          }\n        }\n      });\n    }\n\n    cb(state);\n  },\n};\n\n// Indicators ///////////////////////////////////////////////\n\nconst AlivePatientsIndicator: ValueIndicator = {\n  id: `${moduleId}.indicator.alivePatients`,\n  name: 'Alive patients',\n  type: IndicatorType.VALUE,\n  calculate: state =>\n    state.entities.filter(\n      entity => entity.type.id === Patient.id && entity.properties.health.value > 0,\n    ).length,\n};\n\nconst DeadPatientsIndicator: ValueIndicator = {\n  id: `${moduleId}.indicator.deadPatients`,\n  name: 'Dead patients',\n  type: IndicatorType.VALUE,\n  calculate: state =>\n    state.entities.filter(\n      entity => entity.type.id === Patient.id && entity.properties.health.value < 0,\n    ).length,\n};\n\nconst CriticalPatientsIndicator: ValueIndicator = {\n  id: `${moduleId}.indicator.criticalPatients`,\n  name: 'Critical patients',\n  type: IndicatorType.VALUE,\n  calculate: state =>\n    state.entities.filter(\n      entity => entity.type.id === Patient.id && entity.properties.condition.value === 'critical',\n    ).length,\n};\n\nconst StablePatientsIndicator: ValueIndicator = {\n  id: `${moduleId}.indicator.stablePatients`,\n  name: 'Stable patients',\n  type: IndicatorType.VALUE,\n  calculate: state =>\n    state.entities.filter(\n      entity => entity.type.id === Patient.id && entity.properties.condition.value !== 'critical',\n    ).length,\n};\n\nconst WorldMap: MapIndicator = {\n  id: `${moduleId}.indicator.worldMap`,\n  name: 'World map',\n  type: IndicatorType.MAP,\n  calculate: state => {\n    const markers: MapIndicatorMarker[] = [];\n    state.entities.forEach(entity => {\n      if (entity.type.id === Patient.id) {\n        const location = entity.properties.location.value as Geometry;\n        const health = entity.properties.health.value as number;\n        const isCritical = (entity.properties.condition.value as string) === 'critical';\n        let color = 'green';\n        if (health < 0) {\n          color = 'black';\n        } else if (health < 2 || isCritical) {\n          color = 'red';\n        } else if (health < 3) {\n          color = 'yellow';\n        }\n        markers.push({\n          latitude: location.x,\n          longitude: location.y,\n          content: {\n            icon: {\n              color,\n              name: 'user',\n            },\n          },\n        });\n      } else if (entity.type.id === Ambulance.id) {\n        const location = entity.properties.location.value as Geometry;\n        markers.push({\n          latitude: location.x,\n          longitude: location.y,\n          content: {\n            icon: {\n              color: 'blue',\n              name: 'ambulance',\n            },\n          },\n        });\n      }\n    });\n    return {\n      mapBoxToken:\n        'pk.eyJ1IjoidGFua2Vuc3RlaW4iLCJhIjoiY2p2NHlwZnhmMWg1dDQzcDk5ajhjNXdjeiJ9.2w-6uYLrlgHl1FTEpCBLaA',\n      latitude: 59.437, // Tallinn\n      longitude: 24.7536,\n      zoom: 10,\n      markers,\n    };\n  },\n};\n\nconst PatientsByCondition: BarIndicator = {\n  id: `${moduleId}.indicator.patientsByCondition`,\n  type: IndicatorType.BAR,\n  name: 'Patients by health',\n  calculate: state => {\n    function patientsByHealth(pred: (health: number) => boolean): number {\n      return state.entities.filter(\n        entity => entity.type.id === Patient.id && pred(entity.properties.health.value as number),\n      ).length;\n    }\n    return [\n      {\n        x: '<= 1',\n        y: patientsByHealth(h => h <= 1),\n      },\n      {\n        x: '<= 2',\n        y: patientsByHealth(h => h <= 2 && h > 1),\n      },\n      {\n        x: '<= 3',\n        y: patientsByHealth(h => h <= 3 && h > 2),\n      },\n      {\n        x: '<= 4',\n        y: patientsByHealth(h => h <= 4 && h > 3),\n      },\n      {\n        x: '<= 5',\n        y: patientsByHealth(h => h <= 5 && h > 4),\n      },\n    ];\n  },\n};\n\nconst Ambusim: Module = {\n  id: moduleId,\n  name: 'Ambusim',\n  description: 'Facilities to run basic and naive geographic ambulance simulations.',\n  entityTypes: [Hospital, Patient, Ambulance],\n  models: [AccidentModel, AmbulanceAndPatientBehaviourModel],\n  indicators: [\n    WorldMap,\n    DeadPatientsIndicator,\n    AlivePatientsIndicator,\n    CriticalPatientsIndicator,\n    StablePatientsIndicator,\n    PatientsByCondition,\n  ],\n};\n\nexport default Ambusim;\n","import simulus, { Options } from 'simulus';\nimport 'simulus/dist/main.css';\nimport * as serviceWorker from './serviceWorker';\n\nimport Ambusim from './ambusim';\n\nsimulus(document.getElementById('root')!, {\n  routerType: Options.RouterType.HASH,\n  modules: [Ambusim],\n});\n\nserviceWorker.register({});\n"],"sourceRoot":""}